#+TITLE: Emacs Configuration
#+AUTHOR: Luis Roberto Pereira de Paula

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Luis Roberto Pereira de Paula"
      user-mail-address "luisrpp@gmail.com")
#+end_src


* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file) (load custom-file))
#+end_src

* Appearance

** Themes

*** Monokai theme

#+begin_src emacs-lisp
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'monokai))
#+end_src

** Font

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Bitstream Vera Sans Mono-12"))
; (add-to-list 'default-frame-alist '(font . "Source Code Pro-12"))
; (add-to-list 'default-frame-alist '(font . "Office Code Pro-12"))
#+end_src

We can also define some keybindings to increase and decrease the font size:

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+end_src

* Sane defaults

#+begin_src emacs-lisp
;; Functions
(defun my-prepend-line (&optional arg)
  (interactive "P")
  (move-beginning-of-line arg)
  (open-line 1))

(defun my-append-line (&optional arg)
  (interactive "P")
  (move-end-of-line arg)
  (open-line 1)
  (forward-line 1))

;; UTF-8 please
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq-default indent-tabs-mode nil)

;; Kill whole line
(setq kill-whole-line t)
(global-set-key (kbd "C-k") 'kill-whole-line)
(global-set-key (kbd "C-M-k") 'kill-line)

;; Append & prepend
(global-set-key (kbd "C-o") 'my-append-line)
(global-set-key (kbd "C-S-o") 'my-prepend-line)

;; Don't beep at me
(setq visible-bell t)

;; Turn off the blinking cursor
; (blink-cursor-mode -1)

;; Highlight line
(global-hl-line-mode)

;; Line and column numbering
(global-linum-mode t)
(line-number-mode 1)
(column-number-mode 1)

;; Delete trailing whitespace automatically on save
(add-hook 'before-save-hook
  (lambda ()
    (when (not (derived-mode-p 'markdown-mode))
      (delete-trailing-whitespace))))

;; Fill column indicator
(use-package fill-column-indicator
  :ensure t
  :config
  (progn
    (add-hook 'prog-mode-hook (lambda () (fci-mode) (set-fill-column 120)))
    (setq fci-rule-width 3)))

;; Rectangle selection
(global-set-key (kbd "<C-return>") 'rectangle-mark-mode)

;; Allows one to see matching pairs of parentheses and other characters
(show-paren-mode t)

;; Scroll smoothly
(setq scroll-step 1)
(setq scroll-conservatively 10)
(setq scroll-margin 7)
(setq scroll-conservatively 5)

;; OS Clipboard integration
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
(setq mouse-drag-copy-region t)

;; Stop creating “backup~” files and “#autosave#” files
(setq make-backup-files nil)
(setq auto-save-default nil)

;; Reloading files
(global-auto-revert-mode t)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

(setq uniquify-buffer-name-style 'post-forward)
(setq uniquify-strip-common-suffix nil)

;; Display pictures and other compressed files
(setq auto-image-file-mode t)
(setq auto-compression-mode t)
#+end_src

* Editor augmentation

** Helm

#+begin_src emacs-lisp :results none
(unless (package-installed-p 'helm)
  (package-install 'helm))

(require 'helm-config)
(helm-mode t)

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-c h") 'helm-command-prefix)

(define-key helm-find-files-map (kbd "<tab>") 'helm-execute-persistent-action)
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without introducing external dependencies(when feasible).
For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU
find (but for performance sake an indexing mechanism backed by external commands exists as well).

#+begin_src emacs-lisp :results none
(unless (package-installed-p 'projectile)
  (package-install 'projectile))

; Helm - projectile
(unless (package-installed-p 'helm-projectile)
  (package-install 'helm-projectile))

(require 'helm-projectile)
(global-set-key (kbd "C-c C-f") 'helm-projectile-find-file)
#+end_src

* Development

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(unless (package-installed-p 'magit)
  (package-install 'magit))

(global-set-key (kbd "<f9>") 'magit-status)
#+end_src
