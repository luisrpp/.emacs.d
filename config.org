#+TITLE: Emacs Configuration
#+AUTHOR: Luis Roberto Pereira de Paula

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Luis Roberto Pereira de Paula"
      user-mail-address "luisrpp@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Themes

** Dracula theme

#+begin_src emacs-lisp
(use-package dracula-theme
  :if (window-system)
  :ensure t)
#+end_src

** Solarized theme

#+begin_src emacs-lisp
(use-package solarized-theme
  :ensure t
  :defer 10
  :init
  (progn
;    (load-theme 'solarized-dark)
    (setq x-underline-at-descent-line t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil))
  :config
  (setq color-theme-is-global t))
#+end_src

** Monokai theme

#+begin_src emacs-lisp
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'monokai))
#+end_src

* Font

[[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] is a nice monospaced font.

To install it on Arch Linux:

#+begin_src sh :tangle no
sudo pacman -S adobe-source-code-pro-fonts
#+end_src

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Source Code Pro-13"))
#+end_src

We can also define some keybindings to increase and decrease the font size:

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+end_src

* Sane defaults

#+begin_src emacs-lisp
;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Don't beep at me
(setq visible-bell t)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

;; Highlight line
(global-hl-line-mode)

;; Scroll smoothly
(setq scroll-step 1)

;; OS Clipboard integration
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
(setq mouse-drag-copy-region t)

(show-paren-mode t)

;; Stop creating “backup~” files and “#autosave#” files
(setq make-backup-files nil)
(setq auto-save-default nil)

;; Reloading files
(global-auto-revert-mode t)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Line numbers

#+begin_src emacs-lisp
(use-package linum-relative
  :defer t
  :ensure t
  :init
  (setq linum-relative-current-symbol ""))

(global-linum-mode t)
;(setq linum-format "%4d\u2502")
;(linum-relative-toggle)
#+end_src

* Whitespace

** Trailing whitespace

Delete trailing whitespace automatically on save.

#+begin_src emacs-lisp :results none
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Fill column indicator

#+begin_src emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :config
  (progn
    (add-hook 'prog-mode-hook (lambda () (fci-mode) (set-fill-column 120)))
    (setq fci-rule-width 3)))
#+end_src

* Editor augmentation

** Evil-mode

Evil is an extensible vi layer for Emacs.

#+begin_src emacs-lisp :results none
(use-package evil
  :ensure t
  :config
  (evil-mode 1)

  (use-package evil-nerd-commenter
    :ensure t)

  (use-package evil-leader
    :ensure t
    :config
    (progn
      (evil-leader/set-leader ",")
      (global-evil-leader-mode))
      (evil-leader/set-key
        "cc" 'evilnc-comment-or-uncomment-lines
        "f" 'helm-ag))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t))
#+end_src

** Ag

At first, install [[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]].
Here is how to install it on Arch Linux:

#+begin_src sh :tangle no
sudo pacman -S the_silver_searcher
#+end_src

#+begin_src emacs-lisp
(use-package ag
  :commands ag
  :ensure t)
#+end_src

** Heml

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (use-package helm-projectile
            :ensure t
            :commands helm-projectile
            :bind ("C-c p h" . helm-projectile))
          (use-package helm-ag
            :defer 10
            :ensure t)
          (setq helm-locate-command "mdfind -interpret -name %s %s"
                helm-ff-newfile-prompt-p nil
                helm-M-x-fuzzy-match t)
          (helm-mode)
          (use-package helm-swoop
            :ensure t
            :bind ("H-w" . helm-swoop)))
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)))
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without introducing external dependencies(when feasible).
For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU
find (but for performance sake an indexing mechanism backed by external commands exists as well).

#+begin_src emacs-lisp :results none
(use-package projectile
  :ensure t
  :defer t
  :diminish
  :config
  (projectile-global-mode))
#+end_src

** Recentf mode

As well as using Projectile for browsing projects, [[https://www.emacswiki.org/emacs/RecentFiles][recentf]] shows
recently opened files in the buffer list for fast switching to them.

#+begin_src emacs-lisp :results none
(use-package recentf
  :ensure t
  :defer t
  :bind ("C-x C-r" . helm-recentf)
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 200)
  (setq recentf-auto-cleanup 'never
        recentf-exclude '("[/\\]\\.elpa/"
                          "[/\\]\\.ido\\.last\\'"
                          "[/\\]\\.git/" ".*\\.gz\\'"
                          ".*-autoloads\\.el\\'"
                          "[/\\]archive-contents\\'"
                          "[/\\]\\.loaddefs\\.el\\'"
                          "url/cookies")
        recentf-save-file (expand-file-name ".recentf" tmp-local-dir)
        ;; save 100 most recent files
        recentf-max-saved-items 100))
#+end_src

** Neotree

Sometimes I need to see the directory structure for the current file. The
[[http://www.emacswiki.org/emacs/NeoTree][NeoTree]] plugin helps here with a togglable pane that will pop up and
disappear with the =F8= key.

#+begin_src emacs-lisp :results none
(use-package neotree
  :ensure t
  :defer t
  :bind
  ([f8] . neotree-toggle)
  :init
  (add-hook 'neotree-mode-hook
            (lambda ()
              (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
              (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
              (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
              (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))
#+end_src

** Powerline

#+begin_src emacs-lisp
;(use-package powerline
;  :ensure t
;  :init
;  (powerline-center-theme)
;  (setq powerline-default-separator 'wave))
#+end_src

** Autocompletion

#+begin_src emacs-lisp :results none
(use-package company
  :ensure t
  :init
  (use-package helm-company
    :ensure t
    :config
    (define-key company-mode-map (kbd "C-SPC") 'helm-company)
    (define-key company-active-map (kbd "C-SPC") 'helm-company))
  :config
  (add-hook 'prog-mode-hook 'company-mode)
  (progn
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0.2)
    (setq company-begin-commands '(self-insert-command))

    (eval-after-load 'company
      '(progn
         (define-key company-active-map (kbd "TAB") 'company-select-next)
         (define-key company-active-map [tab] 'company-select-next)))

    ;; Company mode interferes with yasnippets, so this fixes it and integrates them:
    ;; http://emacs.stackexchange.com/questions/10431/get-company-to-show-suggestions-for-yasnippet-names
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  )
)
#+end_src

* Development

** Syntax highlighting and linting

Syntax highlighting and linting when programming. See https://github.com/flycheck/flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :init
  (add-hook 'prog-mode-hook (lambda () (flycheck-mode))))
#+end_src

** Code snippet handling

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status))
#+end_src

** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :ensure t)
#+end_src

** Docker

#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :defer t
  :diminish)

(use-package dockerfile-mode
  :ensure t
  :defer t)
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :defer t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** Python

Integrates with IPython.

#+begin_src emacs-lisp
(use-package python-mode
  :ensure t
  :defer t)
#+end_src

** Ruby

#+begin_src emacs-lisp
(use-package ruby-mode
  :ensure t
  :defer t
  :config
  (evil-leader/set-key-for-mode 'ruby-mode
    "r" 'rspec-verify
    "R" 'rspec-verify-method
    "A" 'rspec-verify-all
    "tt" 'rspec-toggle-spec-and-target
    "te" 'rspec-toggle-spec-and-target-find-example
    "sw" 'rspec-find-spec-or-target-other-window
    "u" 'rubocop-check-current-file
    "U" 'rubocop-check-project))
#+end_src

*** RVM

#+begin_src emacs-lisp
(use-package rvm
  :ensure t
  :defer t
  :init
  (rvm-use-default)
  (rvm-autodetect-ruby))
#+end_src

*** Rspec

#+begin_src emacs-lisp
(use-package rspec-mode
  :ensure t
  :defer t
  :config
  (setq compilation-scroll-output t
        rspec-use-rake-when-possible nil
        rspec-use-bundler-when-possible t
        rspec-use-rvm-when-possible t))
#+end_src

*** Rubocop

#+begin_src emacs-lisp
(use-package rubocop
  :ensure t
  :defer t)
#+end_src

*** Others

#+begin_src emacs-lisp
;(use-package ruby-end
;  :ensure t)
#+end_src

The following allows using binding.pry in rspec-mode.

#+begin_src emacs-lisp
(use-package inf-ruby
  :ensure t
  :init
  (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
  (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter))

(use-package robe
  :ensure t
  :init
  (add-hook 'ruby-mode-hook 'robe-mode)
  :config
  (eval-after-load 'company
    '(push 'company-robe company-backends)))
#+end_src

** Rust

#+begin_src emacs-lisp
(use-package rust-mode
  :ensure t
  :defer t)
#+end_src

** YAML

Add a major mode for yaml highlighting

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :defer t
  :diminish)
#+end_src
