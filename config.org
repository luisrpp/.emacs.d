#+TITLE: Emacs Configuration
#+AUTHOR: Luis Roberto Pereira de Paula

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Luis Roberto Pereira de Paula"
      user-mail-address "luisrpp@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Themes

** Monokai theme

#+begin_src emacs-lisp
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'monokai))
#+end_src

* Font

[[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] is a nice monospaced font.

To install it on Arch Linux:

#+begin_src sh :tangle no
sudo pacman -S adobe-source-code-pro-fonts
#+end_src

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Source Code Pro-14"))
#+end_src

We can also define some keybindings to increase and decrease the font size:

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+end_src

* Sane defaults

#+begin_src emacs-lisp
;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Don't beep at me
(setq visible-bell t)

;; Highlight line
(global-hl-line-mode)

;; Scroll smoothly
(setq scroll-step 1)

;; OS Clipboard integration
(setq x-select-enable-clipboard t)

;; Stop creating “backup~” files and “#autosave#” files
(setq make-backup-files nil)
(setq auto-save-default nil)

;; Reloading files
(global-auto-revert-mode t)
#+end_src

* Line numbers

#+begin_src emacs-lisp
(use-package linum-relative
  :defer t
  :ensure t
  :init
  (setq linum-relative-current-symbol ""))

(global-linum-mode t)
;(linum-relative-toggle)
#+end_src

* Whitespace

** Trailing whitespace

Delete trailing whitespace automatically on save.

#+begin_src emacs-lisp :results none
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Fill column indicator

#+begin_src emacs-lisp
(use-package fill-column-indicator
  :defer t
  :ensure t
  :init
  :config
  (progn
    (setq fci-rule-column 120)
    (setq fci-rule-width 5)))

(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode t)))
(global-fci-mode t)
#+end_src

* Editor augmentation

** Evil-mode

Evil is an extensible vi layer for Emacs.

#+begin_src emacs-lisp :results none
(use-package evil
  :ensure t
  :config
  (evil-mode 1)

  (use-package evil-nerd-commenter
    :ensure t)

  (use-package evil-leader
    :ensure t
    :config
    (progn
      (evil-leader/set-leader ",")
      (global-evil-leader-mode))
      (evil-leader/set-key
        "cc" 'evilnc-comment-or-uncomment-lines))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t))
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without introducing external dependencies(when feasible).
For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU
find (but for performance sake an indexing mechanism backed by external commands exists as well).

#+begin_src emacs-lisp :results none
(use-package projectile
  :ensure t
  :defer t
  :diminish
  :config
  (projectile-global-mode)
)
#+end_src

** Recentf mode

As well as using Projectile for browsing projects, [[https://www.emacswiki.org/emacs/RecentFiles][recentf]] shows
recently opened files in the buffer list for fast switching to them.

#+begin_src emacs-lisp :results none
(use-package recentf
  :ensure t
  :defer t
  :diminish
  :config
  (recentf-mode)
  :bind
  ("C-x C-r" . recentf-open-files)
)
#+end_src

** Neotree

Sometimes I need to see the directory structure for the current file. The
[[http://www.emacswiki.org/emacs/NeoTree][NeoTree]] plugin helps here with a togglable pane that will pop up and
disappear with the =F8= key.

#+begin_src emacs-lisp :results none
(use-package neotree
  :ensure t
  :defer t
  :bind
  ([f8] . neotree-toggle)
  :init
  (add-hook 'neotree-mode-hook
            (lambda ()
              (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
              (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
              (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
              (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))
#+end_src

** Powerline

#+begin_src emacs-lisp
(use-package powerline
  :ensure t
  :init
  (powerline-center-theme)
  (setq powerline-default-separator 'wave))
#+end_src

* Development

** Syntax highlighting and linting

Syntax highlighting and linting when programming. See https://github.com/flycheck/flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :init
  (add-hook 'prog-mode-hook (lambda () (flycheck-mode))))
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status))
#+end_src

** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :ensure t)
#+end_src

** Docker

#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :defer t
  :diminish)

(use-package dockerfile-mode
  :ensure t
  :defer t)
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :defer t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** Python

Integrates with IPython.

#+begin_src emacs-lisp
(use-package python-mode
  :ensure t
  :defer t)
#+end_src

** Ruby

#+begin_src emacs-lisp
(use-package ruby-mode
  :ensure t
  :defer t)
#+end_src

** Rust

#+begin_src emacs-lisp
(use-package rust-mode
  :ensure t
  :defer t)
#+end_src

** YAML

Add a major mode for yaml highlighting

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :defer t
  :diminish)
#+end_src

