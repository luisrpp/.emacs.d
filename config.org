#+TITLE: Emacs Configuration
#+AUTHOR: Luis Roberto Pereira de Paula

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Luis Roberto Pereira de Paula"
      user-mail-address "luisrpp@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file) (load custom-file))
#+end_src

* Appearance

** Themes

*** doom-themes

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)

(use-package doom-themes
  :ensure t)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

(load-theme 'doom-one t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme (all-the-icons must be installed!)
(doom-themes-neotree-config)

;; Corrects (and improves) org-mode's native fontification
(doom-themes-org-config)
#+end_src

** Font

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-12"))
#+end_src

We can also define some keybindings to increase and decrease the font size:

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+end_src

** Spaceline

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme)
      (spaceline-helm-mode)
      (spaceline-toggle-line-column-on))
#+END_SRC

* Sane defaults

#+begin_src emacs-lisp
  ;; Functions
  (defun my-prepend-line (&optional arg)
    (interactive "P")
    (move-beginning-of-line arg)
    (open-line 1))

  (defun my-append-line (&optional arg)
    (interactive "P")
    (move-end-of-line arg)
    (open-line 1)
    (forward-line 1))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq-default indent-tabs-mode nil)

  ;; Kill whole line
  (setq kill-whole-line t)
  (global-set-key (kbd "C-k") 'kill-whole-line)
  (global-set-key (kbd "C-M-k") 'kill-line)

  ;; Append & prepend
  (global-set-key (kbd "C-o") 'my-append-line)
  (global-set-key (kbd "C-S-o") 'my-prepend-line)

  ;; Use spaces instead of tabs
  (setq-default indent-tabs-mode nil)

  ;; Two spaces is a tab
  (setq tab-width 2)

  ;; Don't beep at me
  (setq visible-bell t)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  ;; Highlight line
  (global-hl-line-mode)

  ;; Line and column numbering
  (global-linum-mode t)
  (line-number-mode 1)
  (column-number-mode 1)

  ;; Delete trailing whitespace automatically on save
  (add-hook 'before-save-hook
    (lambda ()
      (when (not (derived-mode-p 'markdown-mode))
        (delete-trailing-whitespace))))

  ;; Fill column indicator
  (use-package fill-column-indicator
    :ensure t
    :config
    (progn
      (add-hook 'prog-mode-hook (lambda () (fci-mode) (set-fill-column 120)))
      (setq fci-rule-width 3)))

  ;; Rectangle selection
  ; (global-set-key (kbd "<C-return>") 'rectangle-mark-mode)

  ;; Allows one to see matching pairs of parentheses and other characters
  (show-paren-mode t)

  ;; Scroll smoothly
  (setq scroll-step 1)
  (setq scroll-conservatively 10)
  (setq scroll-margin 7)
  (setq scroll-conservatively 5)

  ;; OS Clipboard integration
  (setq x-select-enable-clipboard t)
  (setq x-select-enable-primary t)
  (setq mouse-drag-copy-region t)

  ;; Stop creating “backup~” files and “#autosave#” files
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ;; Reloading files
  (global-auto-revert-mode t)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq uniquify-buffer-name-style 'post-forward)
  (setq uniquify-strip-common-suffix nil)

  ;; Display pictures and other compressed files
  (setq auto-image-file-mode t)
  (setq auto-compression-mode t)

  ;; Exec path from shell
  (use-package exec-path-from-shell
    :ensure t)

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5))))

  ;; Kill all buffers
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+end_src

* Editor augmentation

** Ace jump

#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind ("C-c SPC" . ace-jump-mode))

  ;; Ace jump Zap
  (use-package ace-jump-zap
    :ensure t
    :bind (("M-z" . ace-jump-zap-to-char)
           ("M-Z" . ace-jump-zap-up-to-char)))

  ;; Ace window
  (unless (package-installed-p 'ace-window)
    (package-install 'ace-window))
  (global-set-key (kbd "C-x o") 'ace-window)

  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_src

** Helm

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :init (setq helm-command-prefix-key "C-c h")
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)))
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without introducing external dependencies(when feasible).
For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU
find (but for performance sake an indexing mechanism backed by external commands exists as well).

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode))

  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (use-package helm-projectile
    :ensure t
    :bind (("C-c C-f" . helm-projectile-find-file)))
#+end_src

** Autocomplete

#+begin_src emacs-lisp :results none
  (use-package company
    :ensure t
    :diminish
    :init
    (use-package helm-company
      :ensure t))

  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Org

Org mode configuration.

#+BEGIN_SRC emacs-lisp
  ; basic config
  (setq org-src-window-setup 'current-window)

  ; org-bullets
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish
    :init (global-flycheck-mode)
    :config
    (add-hook 'text-mode-hook #'flycheck-mode)
    (add-hook 'org-mode-hook #'flycheck-mode)
    (define-key flycheck-mode-map (kbd "s-;") 'flycheck-previous-error))
#+end_src

** Neotree

Sometimes I need to see the directory structure for the current file. The
[[http://www.emacswiki.org/emacs/NeoTree][NeoTree]] plugin helps here with a togglable pane that will pop up and
disappear with the =F3= key.

#+begin_src emacs-lisp :results none
  (use-package neotree
    :ensure t
    :defer t
    :bind
    ([f3] . neotree-toggle))
#+end_src

** Terminal

#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src

** discover-my-major

#+begin_src emacs-lisp
  (use-package discover-my-major
    :ensure t
    :bind (("C-h C-m" . discover-my-major)))
#+end_src

** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode))
#+end_src

** Visible bookmarks in buffer

#+begin_src emacs-lisp
  (use-package bm
    :ensure t
    :bind (("<C-f2>" . bm-toggle)
           ("<f2>"   . bm-next)
           ("<S-f2>" . bm-previous)))
#+end_src

** multiple-cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :init
    (global-set-key (kbd "C-c m c") 'mc/edit-lines))
#+end_src

** expand-region

#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :defer t
    :init
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

* Development

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("<f9>" . magit-status))
#+end_src

** Docker

#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :defer t
  :diminish)

(use-package dockerfile-mode
  :ensure t
  :defer t)
#+end_src

** Ruby

#+begin_src emacs-lisp
  ;; enh-ruby-mode
  (use-package enh-ruby-mode
    :ensure t
    :defer t
    :mode (("\\.rb\\'"       . enh-ruby-mode)
           ("\\.ru\\'"       . enh-ruby-mode)
           ("\\.gemspec\\'"  . enh-ruby-mode)
           ("\\.rake\\'"     . enh-ruby-mode)
           ("Rakefile\\'"    . enh-ruby-mode)
           ("Gemfile\\'"     . enh-ruby-mode)
           ("Guardfile\\'"   . enh-ruby-mode))
    :config
    (progn
      (setq enh-ruby-indent-level 2
            enh-ruby-add-encoding-comment-on-save nil
            enh-ruby-deep-indent-paren nil
            enh-ruby-bounce-deep-indent t
            enh-ruby-hanging-indent-level 2)
      (setq enh-ruby-program "~/.rvm/rubies/ruby-2.5.3/bin/ruby")
      (setq ruby-insert-encoding-magic-comment nil)
      (define-key enh-ruby-mode-map (kbd "C-c C-f") nil)))

  ;; ruby-eletric-mode
  (use-package ruby-electric
    :ensure t
    :diminish
    :init
    ;; Autoclose paired syntax elements like parens, quotes, etc
    (add-hook 'enh-ruby-mode-hook 'ruby-electric-mode))

  ;; inf-ruby
  (use-package inf-ruby
    :ensure t
    :init
    (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
    (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
    (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter))

  ;; Robe
  (use-package robe
    :ensure t
    :diminish
    :init
    (add-hook 'enh-ruby-mode-hook 'robe-mode)
    :config
    (eval-after-load 'company
      '(push 'company-robe company-backends)))

  ;; RVM
  (use-package rvm
    :ensure t
    :defer t
    :init
    (rvm-use-default)
    (rvm-autodetect-ruby))

  (defadvice inf-ruby-console-auto (before activate-rvm-for-robe activate)
    (rvm-activate-corresponding-ruby))

  ;; rspec
  (use-package rspec-mode
    :ensure t
    :defer t
    :diminish
    :init
    (add-hook 'after-init-hook 'inf-ruby-switch-setup)
    :config
    (setq compilation-scroll-output 'first-error
          rspec-use-rake-when-possible nil
          rspec-use-bundler-when-possible t
          rspec-use-rvm-when-possible t))
#+end_src

** Go

#+begin_src emacs-lisp
(use-package go-mode
  :defer t
  :ensure t)
#+end_src

** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :ensure t)
#+end_src

** SML

#+begin_src emacs-lisp
(use-package sml-mode
  :ensure t
  :defer t)
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode+
  :ensure t)
#+end_src

** YAML

Add a major mode for yaml highlighting

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :defer t
  :diminish)
#+end_src
