#+TITLE: Emacs Configuration
#+AUTHOR: Luis Roberto Pereira de Paula

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Luis Roberto Pereira de Paula"
      user-mail-address "luisrpp@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file) (load custom-file))
#+end_src

* Appearance

** Themes

*** Atom one dark theme

#+begin_src emacs-lisp
(use-package atom-one-dark-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'atom-one-dark t))
#+end_src

*** Monokai theme

#+begin_src emacs-lisp
; (use-package monokai-theme
;  :if (window-system)
;  :ensure t
;  :init
;  (load-theme 'monokai t))
#+end_src

** Font

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-12"))
#+end_src

We can also define some keybindings to increase and decrease the font size:

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+end_src

** Powerline

#+begin_src emacs-lisp :results none
; (use-package powerline
;   :ensure t
;   :init
;   (powerline-center-theme))
#+end_src

* Sane defaults

#+begin_src emacs-lisp
;; Functions
(defun my-prepend-line (&optional arg)
  (interactive "P")
  (move-beginning-of-line arg)
  (open-line 1))

(defun my-append-line (&optional arg)
  (interactive "P")
  (move-end-of-line arg)
  (open-line 1)
  (forward-line 1))

;; UTF-8 please
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq-default indent-tabs-mode nil)

;; Kill whole line
(setq kill-whole-line t)
(global-set-key (kbd "C-k") 'kill-whole-line)
(global-set-key (kbd "C-M-k") 'kill-line)

;; Append & prepend
(global-set-key (kbd "C-o") 'my-append-line)
(global-set-key (kbd "C-S-o") 'my-prepend-line)

;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Two spaces is a tab
(setq tab-width 2)

;; Don't beep at me
(setq visible-bell t)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

;; Highlight line
(global-hl-line-mode)

;; Line and column numbering
(global-linum-mode t)
(line-number-mode 1)
(column-number-mode 1)

;; Delete trailing whitespace automatically on save
(add-hook 'before-save-hook
  (lambda ()
    (when (not (derived-mode-p 'markdown-mode))
      (delete-trailing-whitespace))))

;; Fill column indicator
(use-package fill-column-indicator
  :ensure t
  :config
  (progn
    (add-hook 'prog-mode-hook (lambda () (fci-mode) (set-fill-column 120)))
    (setq fci-rule-width 3)))

;; Rectangle selection
(global-set-key (kbd "<C-return>") 'rectangle-mark-mode)

;; Allows one to see matching pairs of parentheses and other characters
(show-paren-mode t)

;; Scroll smoothly
(setq scroll-step 1)
(setq scroll-conservatively 10)
(setq scroll-margin 7)
(setq scroll-conservatively 5)

;; OS Clipboard integration
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
(setq mouse-drag-copy-region t)

;; Stop creating “backup~” files and “#autosave#” files
(setq make-backup-files nil)
(setq auto-save-default nil)

;; Reloading files
(global-auto-revert-mode t)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

(setq uniquify-buffer-name-style 'post-forward)
(setq uniquify-strip-common-suffix nil)

;; Display pictures and other compressed files
(setq auto-image-file-mode t)
(setq auto-compression-mode t)

;; Exec path from shell
(use-package exec-path-from-shell
  :ensure t)

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+end_src

* Editor augmentation

** Ace jump

#+begin_src emacs-lisp :results none
(unless (package-installed-p 'ace-jump-mode)
  (package-install 'ace-jump-mode))
(require 'ace-jump-mode)

(autoload 'ace-jump-mode "ace-jump-mode" "Emacs quick move minor mode" t)
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;; enable a more powerful jump back function from ace jump mode
(autoload 'ace-jump-mode-pop-mark "ace-jump-mode" "Ace jump back:-)" t)
(eval-after-load "ace-jump-mode" '(ace-jump-mode-enable-mark-sync))

;; Ace jump Zap
(unless (package-installed-p 'ace-jump-zap)
  (package-install 'ace-jump-zap))
(define-key global-map (kbd "M-z") 'ace-jump-zap-to-char)
(define-key global-map (kbd "M-Z") 'ace-jump-zap-up-to-char)

;; Ace window
(unless (package-installed-p 'ace-window)
  (package-install 'ace-window))
(global-set-key (kbd "C-x o") 'ace-window)

(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_src

** Helm

#+begin_src emacs-lisp :results none
(unless (package-installed-p 'helm)
  (package-install 'helm))

(require 'helm-config)
(helm-mode t)

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-c h") 'helm-command-prefix)

(define-key helm-find-files-map (kbd "<tab>") 'helm-execute-persistent-action)
#+end_src

** Ag

#+begin_src emacs-lisp
(use-package ag
  :commands ag
  :ensure t)

(use-package helm-ag
  :defer 10
  :ensure t)
#+end_src

You will need to install [[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]].
Here is how to install it on Arch Linux:

#+begin_src sh :tangle no
sudo pacman -S the_silver_searcher
#+end_src

** Dired+

#+begin_src emacs-lisp :results none
(use-package dired+
  :ensure t
  :config
  (require 'dired+))

(add-hook 'dired-mode-hook (lambda () (define-key dired-mode-map (kbd "M-g") 'ack)))
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without introducing external dependencies(when feasible).
For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU
find (but for performance sake an indexing mechanism backed by external commands exists as well).

#+begin_src emacs-lisp :results none
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode))

; Helm - projectile
(unless (package-installed-p 'helm-projectile)
  (package-install 'helm-projectile))

(require 'helm-projectile)
(global-set-key (kbd "C-c C-f") 'helm-projectile-find-file)
(global-set-key (kbd "C-c l") 'helm-projectile-ag)
#+end_src

** Autocomplete

#+begin_src emacs-lisp :results none
(use-package company
  :ensure t
  :init
  (use-package helm-company
    :ensure t))

(add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Recentf mode

As well as using Projectile for browsing projects, [[https://www.emacswiki.org/emacs/RecentFiles][recentf]] shows
recently opened files in the buffer list for fast switching to them.

#+begin_src emacs-lisp :results none
(use-package recentf
  :ensure t
  :defer t
  :bind ("C-x C-r" . helm-recentf)
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 200)
  (setq recentf-auto-cleanup 'never
        recentf-exclude '("[/\\]\\.elpa/"
                          "[/\\]\\.ido\\.last\\'"
                          "[/\\]\\.git/" ".*\\.gz\\'"
                          ".*-autoloads\\.el\\'"
                          "[/\\]archive-contents\\'"
                          "[/\\]\\.loaddefs\\.el\\'"
                          "url/cookies")
        recentf-save-file (expand-file-name ".recentf" tmp-local-dir)
        ;; save 100 most recent files
        recentf-max-saved-items 100))
#+end_src

** Neotree

Sometimes I need to see the directory structure for the current file. The
[[http://www.emacswiki.org/emacs/NeoTree][NeoTree]] plugin helps here with a togglable pane that will pop up and
disappear with the =F3= key.

#+begin_src emacs-lisp :results none
(use-package neotree
  :ensure t
  :defer t
  :bind
  ([f3] . neotree-toggle))
#+end_src

* Development

** Syntax highlighting and linting

Syntax highlighting and linting when programming. See https://github.com/flycheck/flycheck

#+begin_src emacs-lisp
;; (use-package flycheck
;;   :ensure t
;;   :defer t
;;   :init
;;   (add-hook 'prog-mode-hook (lambda () (flycheck-mode))))
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(unless (package-installed-p 'magit)
  (package-install 'magit))

(global-set-key (kbd "<f9>") 'magit-status)
#+end_src

** Docker

#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :defer t
  :diminish)

(use-package dockerfile-mode
  :ensure t
  :defer t)
#+end_src

** Ruby

#+begin_src emacs-lisp
;; ruby-mode
(use-package ruby-mode
  :ensure t
  :defer t
  :config
  (setq ruby-insert-encoding-magic-comment nil))

;; RVM
(use-package rvm
  :ensure t
  :defer t
  :init
  (rvm-use-default)
  (rvm-autodetect-ruby))

;; rspec
(use-package rspec-mode
  :ensure t
  :defer t
  :config
  (setq compilation-scroll-output 'first-error
        rspec-use-rake-when-possible nil
        rspec-use-bundler-when-possible t
        rspec-use-rvm-when-possible t))

;; rubocop
; (use-package rubocop
;  :ensure t
;  :defer t)

;; Line numbers
(defun my-ruby-mode-hook ()
  (linum-mode 1))
(add-hook 'ruby-mode-hook 'my-ruby-mode-hook)

;; inf-ruby
(use-package inf-ruby
  :ensure t
  :init
  (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
  (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter))

;; Robe
(use-package robe
  :ensure t
  :init
  (add-hook 'ruby-mode-hook 'robe-mode)
  :config
  (eval-after-load 'company
    '(push 'company-robe company-backends)))
#+end_src

** Go

#+begin_src emacs-lisp
(use-package go-mode
  :defer t
  :ensure t)

(exec-path-from-shell-copy-env "GOPATH")

(add-hook 'go-mode-hook
  (lambda ()
    (add-hook 'before-save-hook 'gofmt-before-save)
    (setq gofmt-command "goimports")
    (setq tab-width 4)
    (setq indent-tabs-mode 1)))
#+end_src

** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :ensure t)
#+end_src

** SML

#+begin_src emacs-lisp
(use-package sml-mode
  :ensure t
  :defer t)
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :defer t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** YAML

Add a major mode for yaml highlighting

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :defer t
  :diminish)
#+end_src
