#+TITLE: Emacs Configuration
#+AUTHOR: Luis Roberto Pereira de Paula

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Luis Roberto Pereira de Paula"
      user-mail-address "luisrpp@gmail.com")
#+end_src


* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Appearance

** Themes

*** Monokai theme

#+begin_src emacs-lisp
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'monokai))
#+end_src

** Font

[[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] is a nice monospaced font.

To install it on Arch Linux:

#+begin_src sh :tangle no
sudo pacman -S adobe-source-code-pro-fonts
#+end_src

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Source Code Pro-13"))
#+end_src

We can also define some keybindings to increase and decrease the font size:

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+end_src

* Sane defaults

#+begin_src emacs-lisp
;; UTF-8 please
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq-default indent-tabs-mode nil)

;; Don't beep at me
(setq visible-bell t)

;; Turn off the blinking cursor
; (blink-cursor-mode -1)

;; Highlight line
(global-hl-line-mode)

;; Scroll smoothly
(setq scroll-step 1)
(setq scroll-conservatively 10)
(setq scroll-margin 7)
(setq scroll-conservatively 5)

;; OS Clipboard integration
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
(setq mouse-drag-copy-region t)

;; Allows one to see matching pairs of parentheses and other characters
(show-paren-mode t)

;; Stop creating “backup~” files and “#autosave#” files
(setq make-backup-files nil)
(setq auto-save-default nil)

;; Reloading files
(global-auto-revert-mode t)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

(setq uniquify-buffer-name-style 'forward)

;; Line and column numbering
(column-number-mode 1)
(line-number-mode 1)

;; Delete trailing whitespace automatically on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Fill column indicator
(use-package fill-column-indicator
  :ensure t
  :config
  (progn
    (add-hook 'prog-mode-hook (lambda () (fci-mode) (set-fill-column 120)))
    (setq fci-rule-width 3)))

;; Display time
(load "time" t t)
(display-time)

;; Display pictures and other compressed files
(setq auto-image-file-mode t)
(setq auto-compression-mode t)
#+end_src

* Editor augmentation

** Ag

#+begin_src emacs-lisp
(use-package ag
  :commands ag
  :ensure t)
#+end_src

You will need to install [[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]].
Here is how to install it on Arch Linux:

#+begin_src sh :tangle no
sudo pacman -S the_silver_searcher
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without introducing external dependencies(when feasible).
For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU
find (but for performance sake an indexing mechanism backed by external commands exists as well).

#+begin_src emacs-lisp :results none
(use-package projectile
  :ensure t
  :defer t
  :diminish
  :config
  (projectile-global-mode))
#+end_src

* Development

** Syntax highlighting and linting

Syntax highlighting and linting when programming. See https://github.com/flycheck/flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :init
  (add-hook 'prog-mode-hook (lambda () (flycheck-mode))))
#+end_src

** Code snippet handling

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status))
#+end_src

